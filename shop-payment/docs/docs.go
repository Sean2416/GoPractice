// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/callApiAndLog": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Demo"
                ],
                "summary": "callApiAndLog",
                "responses": {}
            }
        },
        "/v1/consultant": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consultant"
                ],
                "summary": "新增顧問",
                "parameters": [
                    {
                        "type": "string",
                        "default": "1234",
                        "description": "token",
                        "name": "Token",
                        "in": "header"
                    },
                    {
                        "description": "body",
                        "name": "sendBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.AddUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.UserResponseData"
                        }
                    }
                }
            }
        },
        "/v1/consultant/{conSn}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consultant"
                ],
                "summary": "取得顧問資料",
                "parameters": [
                    {
                        "type": "string",
                        "default": "2913",
                        "description": "顧問Sn",
                        "name": "conSN",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller_model.GetConsultantResp"
                        }
                    }
                }
            }
        },
        "/v1/demoContext": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Demo"
                ],
                "summary": "for FromContext",
                "responses": {}
            }
        },
        "/v1/democontextA": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Demo"
                ],
                "summary": "democontextAcallB",
                "responses": {}
            }
        },
        "/v1/memberInfo": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Demo"
                ],
                "summary": "for db log",
                "responses": {}
            }
        },
        "/v1/referral/{conSn}": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Consultant"
                ],
                "summary": "創建老師專屬URL",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 119691,
                        "description": "顧問Sn",
                        "name": "conSn",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "body",
                        "name": "sendBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller_model.CreateReferralUrlReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.AddUserRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "description": "年齡",
                    "type": "integer"
                },
                "brother_list": {
                    "description": "兄弟列表v1",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "姓名",
                    "type": "string"
                }
            }
        },
        "api.UserResponseData": {
            "type": "object",
            "properties": {
                "account_status": {
                    "description": "帳號類型",
                    "type": "integer"
                },
                "age": {
                    "type": "integer"
                },
                "brother_list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "cname": {
                    "type": "string"
                },
                "is_kids": {
                    "type": "boolean"
                },
                "last_updated": {
                    "description": "一種可以參考時間方式, 也能直接int64 or string",
                    "$ref": "#/definitions/timestamppb.Timestamp"
                },
                "name": {
                    "description": "姓名",
                    "type": "string"
                },
                "relation_map": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "controller_model.CreateReferralUrlReq": {
            "type": "object",
            "required": [
                "url"
            ],
            "properties": {
                "url": {
                    "type": "string",
                    "example": "url"
                }
            }
        },
        "controller_model.GetConsultantResp": {
            "type": "object",
            "properties": {
                "basicCname": {
                    "type": "string"
                },
                "basicFname": {
                    "type": "string"
                },
                "basicLname": {
                    "type": "string"
                },
                "conName": {
                    "type": "string"
                },
                "conSn": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "workFor": {
                    "type": "string"
                }
            }
        },
        "timestamppb.Timestamp": {
            "type": "object",
            "properties": {
                "nanos": {
                    "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
                    "type": "integer"
                },
                "seconds": {
                    "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
