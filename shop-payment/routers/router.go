package routers

import (
    "fmt"
    "github.com/gin-gonic/gin"
    "github.com/gin-gonic/gin/binding"
    "github.com/go-playground/validator/v10"
    "github.com/swaggo/files"       // swagger embed files
    "github.com/swaggo/gin-swagger" // gin-swagger middleware
    _ "shop-payment/docs"          // docs is generated by Swag CLI, you have to import it.
    "shop-payment/shop-payment/app"
    "shop-payment/shop-payment/client"
    "shop-payment/shop-payment/controller/v1/consultant"
    "shop-payment/shop-payment/controller_model"
    "shop-payment/shop-payment/dao"
    "shop-payment/shop-payment/service"
    "shop-payment/shop-payment/sutil"
    "net/http"
    "scm.tutorabc.com/jimzhong/grpc-idl-templete/api"
    "scm.tutorabc.com/jimzhong/grpc-idl-templete/constants"
    "scm.tutorabc.com/tgo-framework/gin-middleware"
    "scm.tutorabc.com/tgo-framework/go-log"
    "scm.tutorabc.com/tgo-framework/go-trace"
)

// InitRouter
func InitRouter(config gin_middleware.Config) *gin.Engine {
    r := gin_middleware.NewTGO(config)

    r.RedirectFixedPath = true

    //如果有要做特殊驗證邏輯, 沒有就把這段刪除
    if v, ok := binding.Validator.Engine().(*validator.Validate); ok {
        v.RegisterValidation("urlVerify", controller_model.UrlVerify)
    }

    v1 := r.Group("/v1")
    v1.Use()
    {
        //＊＊＊測試區塊＊＊＊
        //取context 範例, 進去看function, 可以留著當範本
        v1.GET("/demoContext", demoContext)
        v1.GET("/callApiAndLog", callApiAndLog)
        v1.GET("/democontextA", democontextA)
        v1.GET("/democontextB", democontextB)
        v1.GET("/memberInfo", getMemberInfoByID)

        //顧問系列
        userController := consultant.NewConsultantController()
        v1.POST("/consultant", userController.CreateConsultant)
        v1.GET("/consultant/:conSn", userController.GetConsultant)
        v1.POST("/referral/:conSn", userController.CreateReferralUrl)

    }

    // swagger/index.html
    r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
    return r
}

// @Tags Demo
// @Summary for FromContext
// @version 1.0
// @Accept  json
// @Produce  json
// @Router /v1/demoContext [GET]
func demoContext(c *gin.Context) {
    ctx := c.Request.Context()
    fmt.Println("==== test trace")
    fmt.Println(trace.FromContext(c.Request.Context()))

    locale := trace.FromContext(ctx).Locale().String()
    timezone := trace.FromContext(ctx).Timezone().String()
    log.Infof("代碼紀錄log:||%v||resp %s", trace.FromContext(ctx), "xxxxxxx")
    log.Infof("locale||locale=%s", locale)
    log.Infof("timezone||timezone=%s", timezone)
    name := c.Param("name")
    appG := app.Gin{C: c}
    appG.ResponseCasual(http.StatusOK, app.SUCCESS, name)
}

// @Tags Demo
// @Summary callApiAndLog
// @version 1.0
// @Accept  json
// @Produce  json
// @Router /v1/callApiAndLog [GET]
func callApiAndLog(c *gin.Context) {
    ctx := c.Request.Context()
    appG := app.Gin{C: c}

    result, err := service.CallAServer(ctx)
    if err != nil {
        appG.ResponseErrCasual(http.StatusInternalServerError, app.ERROR, nil)
        return
    }

    data := api.UserResponse{
        ApiMeta: app.GenResponseApiMeta(ctx, constants.ErrNo_OK),
        Data:    result,
    }
    appG.Response(http.StatusOK, data)
}

func democontextB(c *gin.Context) {
    ctx := c.Request.Context()
    appG := app.Gin{C: c}

    key := sutil.RandomString(2)

    log.Infof("1. : key=%v||%v", key, trace.FromContext(ctx))
    log.Infof("2. :||%v", trace.FromContext(ctx))
    appG.Response(http.StatusOK, "")
}

// @Tags Demo
// @Summary democontextAcallB
// @version 1.0
// @Accept  json
// @Produce  json
// @Router /v1/democontextA [GET]
func democontextA(c *gin.Context) {
    ctx := c.Request.Context()
    appG := app.Gin{C: c}

    for i := 0; i <= 1; i++ {
        client.AserverAPI(ctx).R().Get("/v1/democontextB")
        log.Infof("democontextA||i=%v||%v", i, trace.FromContext(ctx))
    }

    appG.Response(http.StatusOK, "")
}

// @Tags Demo
// @Summary for db log
// @version 1.0
// @Accept  json
// @Produce  json
// @Router /v1/memberInfo [GET]
func getMemberInfoByID(c *gin.Context) {
    appG := app.Gin{C: c}

    r, _ := dao.GetMemberInfoByID(1900)
    appG.Response(http.StatusOK, r)
}
